<%
  # API
  my $api = gitprep_api;
  
  # Parameters
  my $user_id = param('user');
  my $project_id = param('project');
  
  # Can write access
  my $session_user_id = $api->session_user_id;
  my $can_write_access = $api->can_write_access($session_user_id, $user_id, $project_id);
  
  my $errors;
  if (lc $self->req->method eq 'post') {
    unless ($can_write_access) {
      Carp::croak("Don't have write access");
    }

    my $op = param('op') // '';

    my $project_row_id = app->dbi->model('project')->select(
      'project.row_id',
      where => {'user.id' => $user_id, 'project.id' => $project_id}
    )->value;

    if ($op eq 'create') {
      my $id = param('label-id');
      my $description = param('description') || '';
      my $color = param('color');
      
      my $vc = app->vc;
      my $validation = $vc->validation;
      
      if (!length $id) {
        $validation->add_failed(id => "Name can't be blank");
      }
      elsif (length $id > 100) {
        $validation->add_failed(id => 'Name is too long');
      }
      elsif (length $description > 300) {
        $validation->add_failed(id => 'Description is too long');
      }
      else {
        my $label = app->dbi->model('label')->select(
          where => {
            project => $project_row_id,
            id => $id
          }
        )->one;
        
        if ($label) {
          $validation->add_failed(id => 'Label name already in use');
        }
      }
      
      if (!length $color) {
        $validation->add_failed(color => "Color can't be blank");
      }
      
      if ($validation->is_valid) {
        
        my $new_label = {
          id => $id,
          description => $description,
          color => $color,
          project => $project_row_id
        };
        
        app->dbi->model('label')->insert($new_label);
        
        $self->redirect_to;
        return;
      }
      else {
        $errors = $validation->messages;
      }
    }
    elsif ($op eq 'api-delete') {
      my $row_id = param('row-id');
      my $json = {success => 1};

      eval {
        Carp::croak('Label not for this project') unless app->dbi->model('label')->select(
          'count(*)',
          where => {row_id => $row_id, project => $project_row_id})->value;
        app->dbi->connector->txn(sub {
          eval app->dbi->model('issue_label')->delete(where => {label => $row_id});
          Carp::croak $@ if $@;
          eval app->dbi->model('label')->delete(where => {row_id => $row_id});
          Carp::croak $@ if $@;
        });
      };

      $json = {success => 0, message => $@} if $@;
      $self->render(json => $json);
      return;
    }
    elsif ($op eq 'api-update') {
      my $row_id = param('row-id');
      my $id = param('id');
      my $description = param('description') || '';
      my $color = param('color');

      my $vc = app->vc;
      my $validation = $vc->validation;

      if (!length $id) {
        $validation->add_failed(id => "Name can't be blank");
      }
      elsif (length $id > 100) {
        $validation->add_failed(id => 'Name is too long');
      }
      elsif (length $description > 300) {
        $validation->add_failed(id => 'Description is too long');
      }
      elsif (app->dbi->model('label')->select('project',
        where => {row_id => $row_id})->value != $project_row_id) {
        $validation->add_failed(id => 'Label not for this project');
      }
      else {
        my $label = app->dbi->model('label')->select(
          where => {
            project => $project_row_id,
            id => $id
          }
        )->one;

        if ($label && $row_id ne $label->{row_id}) {
          $validation->add_failed(id => 'Label name already in use');
        }
      }

      if (!length $color) {
        $validation->add_failed(color => "Color can't be blank");
      }

      if ($validation->is_valid) {
        app->dbi->model('label')->update({id => $id, description => $description, color => $color}, where => {row_id => $row_id});
        
        $self->render(json => {success => 1, label => $api->label($row_id, tag => 'div', class => 'labels-tag', icon => '')});
        return;
      }
      else {
        $self->render(json => {success => 0, message => $validation->messages->[0]});
        return;
      }
    }
  }

  my $labels = app->dbi->model('label')->select(
    {__MY__ => '*'},
    where => {'project__user.id' => $user_id, 'project.id' => $project_id},
    append => 'order by id'
  )->all;

  # Default color;
  my $default_color = sprintf '#%02x%02x%02x', (int rand 255), (int rand 255), (int rand 255);

  layout 'common', title => "Labels - $user_id/$project_id";
%>

%= javascript begin
  $(document).ready(function () {
    $('.labels-new-btn').on('click', function () {
      $('.labels-create-panel').toggle();
    });

    $('.labels-create-cancel-btn').on('click', function () {
      $('.labels-create-panel').hide();
    });
    
    $('.labels-edit').on('click', function () {
      var li = $(this).closest('li');
      var da = $('.labels-display-area', li);
      var ea = $('.labels-edit-area', li);
      var color = $('.labels-tag', da).css('background-color');
      var colorinput = $('[name="color"]', ea);
      $('[name="label-id"]', ea).val($('.label-id', da).text());
      colorinput.val(Gitprep.standardizeColor(color));
      colorinput.parent().css('background', color);
      da.hide();
      ea.show();
    });

    $('.labels-edit-cancel-btn').on('click', function () {
      $(this).closest('li').find('.labels-display-area').show();
      $(this).closest('li').find('.labels-edit-area').hide();
    });
    
    $('.labels-delete').on('click', function () {
      var li = $(this).closest('li');
      var row_id = li.attr('row-id');
      $.post('<%= url_for %>', {'row-id' : row_id, op : 'api-delete'}, function (result) {
        if (result.success) {
          li.fadeOut();
        }
      });
    });

    $('.labels-edit-save-btn').on('click', function () {
      var li = $(this).closest('li');
      var row_id = li.attr('row-id');
      var id = li.find('[name=label-id]').val();
      var description = li.find('[name=description]').val();
      var color = li.find('[name=color]').val();

      $.post('<%= url_for %>', {'row-id' : row_id, op : 'api-update', id : id, description : description, color : color}, function (result) {

        if (result.success) {
          li.find('.labels-tag').replaceWith(result.label);

          li.find('.labels-display-area').show();
          li.find('.labels-edit-area').hide();
        }
        else {
          li.find('.labels-error').text(result.message);
        }
      });
    });

    /* Workaround an FF bug when refreshing the page. */
    var clabcol = $('.labels-create-panel .labels-input-label-color');
    clabcol.val(Gitprep.standardizeColor(clabcol.parent().css('background-color')));
  });
% end

%= include '/include/header';

<div class="container">
  %= include '/include/errors', errors => $errors;
  % if ($can_write_access) {
    <div class="labels-new-panel">
      <div class="labels-new-btn btn btn-green btn-new">
        New label
      </div>
    </div>
  % }
  
  <form class="labels-create-panel" action="<%= url_for %>" method="post" style="display:none">
    %= hidden_field op => 'create';
    <div class="labels-input-rows">
      <div class="table-header">
        <div>Label name</div>
        <div>Description</div>
        <div>Color</div>
        <div class="labels-right table-padding">
          <div class="labels-create-cancel-btn btn">
            Cancel
          </div>
          <input type="submit" value="Create label" class="labels-create-create-btn btn btn-green" />
        </div>
      </div>
      <div>
        <div>
          %= input_tag 'label-id', class => 'labels-input-label-id', placeholder => 'Label text';
        </div>
        <div>
          %= input_tag 'description', class => 'labels-input-description', placeholder => 'Description (optional)';
        </div>
        <div class="labels-input-label-color-area" style="background-color: <%= $default_color %>;">
          <%= input_tag(color => $default_color, type => 'color',
            color => $default_color, class => 'labels-input-label-color',
            onchange => 'this.parentNode.style.backgroundColor = this.value;') %>
        </div>
      </div>
    </div>
  </form>
  <ul class="labels">
    <li>
      <%= $api->plural('label', scalar(@$labels), 'no'); %>
    </li>
    % for my $label (@$labels) {
      <li row-id="<%= $label->{row_id} %>">
        <div class="labels-display-area">
          %= $api->label($label->{row_id}, tag => 'div', class => 'labels-tag', icon => '');
          <div class="flex-padding"></div>
          <div class="labels-right">
            % if ($can_write_access) {
              <div class="labels-edit">
                <a href="javascript:void(0)">
                  %= $api->icon('pencil');
                  Edit
                </a>
              </div>
              <div class="labels-delete">
                <a href="javascript:void(0)">
                  %= $api->icon('x');
                  Delete
                </a>
              </div>
            % }
          </div>
        </div>
        <div class="labels-edit-area" style="display:none">
          <div class="labels-input-rows">
            <div class="table-header">
              <div>Label name</div>
              <div>Description</div>
              <div>Color</div>
              <div class="labels-right table-padding">
                <div class="labels-edit-cancel-btn btn">
                  Cancel
                </div>
                <div class="labels-edit-save-btn btn btn-green">
                  Save changes
                </div>
              </div>
            </div>
            <div>
              <div>
                %= input_tag 'label-id' => $label->{id}, class => 'labels-input-label-id', placeholder => 'Label text';
              </div>
              <div>
                %= input_tag 'description' => $label->{description} || '', class => 'labels-input-description', placeholder => 'Description (optional)';
              </div>
              <div class="labels-input-label-color-area" style="background-color: <%= $label->{color} %>;">
                <%= input_tag('color' => $label->{color}, type => 'color',
                  color => $label->{color}, class => 'labels-input-label-color',
                  onchange => 'this.parentNode.style.backgroundColor = this.value;') %>
              </div>
              <div class="labels-error table-padding" style="color:red;"></div>
            </div>
          </div>
        </div>
      </li>
    % }
  </ul>
</div>

%= include '/include/footer';
