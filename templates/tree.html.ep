<%
  my $state;

  # API
  my $api = gitprep_api;

  # Git
  my $git = app->git;
  
  # Parameters
  my $user_id = param('user');
  my $project_id = param('project');
  
  my $project_row_id = $api->get_project_row_id($user_id, $project_id);
  
  my $rev;
  my $dir;
  my $rev_dir = param('rev_dir');
  if (defined $rev_dir) {
    ($rev, $dir) = $git->parse_rev_path(app->rep_info($user_id, $project_id), $rev_dir);
  }
  else {
    $rev = app->manager->default_branch($user_id, $project_id);
  }
  
  unless (app->manager->exists_project($user_id, $project_id)) {
    $self->reply->not_found;
    return;
  }

  # Repository description
  my $desc = $git->description(app->rep_info($user_id, $project_id));
  my $website_url = app->dbi->model('project')->select('website_url', where => {row_id => $project_row_id})->value;
  
  # Check existence
  if ($git->exists_branch(app->rep_info($user_id, $project_id))) {
    # Commit
    my $commit = $git->get_commit(app->rep_info($user_id, $project_id), $rev);
    
    # Tree
    my $trees;
    if (defined $dir && length $dir) {
      $trees = $git->trees(app->rep_info($user_id, $project_id), $rev, $dir);
    }
    else {
      $trees = $git->trees(app->rep_info($user_id, $project_id), $rev);
    }
    
    # Variable for included template
    stash(
      commit => $commit,
      trees => $trees,
      rev => $rev,
      title => "$user_id/$project_id",
    );
    
    $state = 'display';
  }
  else { $state = 'init' }
  
  my $is_project_top_page = !(defined $dir && length $dir);

  my $ssh_rep_url = $api->ssh_rep_url($user_id, $project_id);

  my $branches = stash('branches');
  
  my $logined = $api->logined;
  
  my $original_project;
  my $is_private_project;
  my $fork_count;
  
  my $no_project_header = stash('no_project_header');
  
  if (!$no_project_header && defined $project_id) {
    $original_project = app->manager->original_project($user_id, $project_id);
    $is_private_project = app->manager->is_private_project($user_id, $project_id);
    $fork_count = scalar(@{app->manager->member_projects($user_id, $project_id)});
    if ($fork_count >= 1000000) {
      $fork_count = sprintf('%.1f', $fork_count / 1000000.0);
      $fork_count =~ s/\.?0*$/M/;
    }
    elsif ($fork_count >= 1000) {
      $fork_count = sprintf('%.1f', $fork_count / 1000.0);
      $fork_count =~ s/\.?0*$/k/;
    }
  }
  
  my $session_user_row_id = session('user_row_id');
  my $session_user = app->dbi->model('user')->select(where => {row_id => $session_user_row_id})->one;
  
  layout 'common', title => "$user_id/$project_id";
%>
  
  %= include '/include/header';
  
  <div class="container">
    %= include '/include/message', message => flash('message');
    
    % if ($is_project_top_page) {
      <div class="project-header" style="background-color:white;">
        <div class="container project-header-top">
          <ul class="breadcrumb">
            <li><b><a href="<%= url_for("/$user_id/$project_id") %>"><%= $project_id %></a></b></li>

            % if ($is_private_project) {
              %= $api->icon('lock');
            % }

            % if (defined $original_project) {
              <small>
                (
                  forked from
                  <a href="<%= url_for("/$original_project->{'user.id'}/$original_project->{id}") %>">
                    <%= "$original_project->{'user.id'}/$original_project->{id}" %>
                  </a>
                )
              </small>
            % }
          </ul>
          <div class="flex-padding"></div>
          <div class="project-header-right">
            <div class="project-header-right-container">
              % if ($logined && defined $project_id) {
                <div class="project-header-btn-container">
                  <span id="watch-btn-frame">
                    %= include '/api/watch', state => undef;
                  </span>
                  % if ($session_user->{id} ne $user_id ) {
                    <a href="<%= url_for("/$user_id/$project_id/fork") %>" class="btn btn-fork">
                      %= $api->icon('repo-forked');
                      Fork
                      <span class="count-label">
                        <%= $fork_count %>
                      </span>
                    </a>
                  % } else {
                    <button class="btn btn-fork disabled', disabled="">
                      %= $api->icon('repo-forked');
                      Fork
                      <span class="count-label">
                        <%= $fork_count %>
                      </span>
                    </button>
                  % }
                </div>
              % }
            </div>
          </div>
        </div>
        <div class="tree-description">
          <%= $desc %>
          % if (defined $website_url && length $website_url) {
            <a href="<%= $website_url %>">website</a>
          % }
        </div>
      </div>
    % }
    % if ($state eq 'display') {
      <div style="margin-bottom:5px;">
        % my $display = defined $dir && length $dir ? 'tree' : 'tree_top';
        %= include '/include/branch_select', display => $display, Path => $dir;
      </div>

      <div style="margin-bottom:30px">
        %= include '/include/tree', dir => $dir, user_id => $user_id, project_id => $project_id, rev => $rev;
      </div>

      %= include '/include/readme', dir => $dir;
      
    % } elsif ($state eq 'init' && $api->logined($user_id)) {
      
      <h4 class="topic1">SSH</h4>
      
      <div class="text-center" style="margin-bottom:10px">
        <b>Create a new repository on the command line via ssh</b>
      </div>
      
      <pre class="command-line">
touch README
git init
git add README
git commit -m "first commit"
git remote add origin <%= $ssh_rep_url %>
git push -u origin master</pre>
      
      <div class="text-center" style="margin-bottom:10px">
        <b>Push an existing repository from the command line via ssh</b>
      </div>
      
      <pre class="command-line">
git remote add origin <%= $ssh_rep_url %>
git push -u origin master</pre>

      <hr />

      % my $http_rep_url = url_for("$user_id/$project_id.git")->to_abs;
      <h4 class="topic1"><%= uc url_for->to_abs->scheme %></h4>

      <div class="text-center" style="margin-bottom:10px">
        <b>Create a new repository on the command line via <%= url_for->to_abs->scheme %></b>
      </div>
      
      <pre class="command-line">
touch README
git init
git add README
git commit -m "first commit"
git remote add origin <%= $http_rep_url %>
git push -u origin master</pre>
      
      <div class="text-center" style="margin-bottom:10px">
        <b>Push an existing repository from the command line via <%= url_for->to_abs->scheme %></b>
      </div>
      
      <pre class="command-line">
git remote add origin <%= $http_rep_url %>
git push -u origin master</pre>
    % } else {
      <div class="not-yet-created">
        <b>Repository is not yet created.</b>
      </div>
    % }
  </div>
  
  %= include '/include/footer';
